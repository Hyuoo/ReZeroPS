#https://school.programmers.co.kr/learn/courses/30/lessons/12902
'''
3n타일링.
풀이시간 : 30분 정도?
원리? 점화식 찾는 문제.

2, 4, 6.. 규칙성을 찾아서 반복

사실 혼자서 하다가 정답에 근사한 값은 나오는데
틀려서 검색해서 답을 봤다.

항상 새로운 경우에서 특수케이스 2개씩 늘어나는데,
이 경우를 계산하는 방식이 틀렸다.

1 2
1 2 => 끝부분이 이모양일때 1개,
3 3

1 1
2 3 => 이모양일때 1개,
2 3

1 1
2 2 => 이모양은 특수케이스 없이.
3 3

에서 2칸씩 늘어나니 *3에 +2를 해줬으나

그럼 각각의 모든 케이스에서 늘어나서 +2는 중복되는데, 그렇게 할 필요가 없었다.

사실 아직도 완벽히 이해가 안되고 계속 헷갈린다.
해설 보고, 생각해서 코드로 옮길때는 이해가 된 것 같았는데 오락가락함.

ar = [0,3]
for i in range():
    tmp = ar[i]*3
    tmp += sum(ar[:i])*2
    tmp += 2
    ar.append(tmp)
return ar[-1]
이런식으로 구현했다가
어 근데 앞부분은 어차피 각각계산을 안하니 누적합으로 쓰면 되겠네 해서
ar = [0,3]
for _ in range():
    tmp = ar[1]*3 + ar[0]*2 +2
    ar[0] += ar[1]
    ar[1] = tmp
return ar[1]
로 바꿨다가
왠지 "파이써닉" 하게 코드를 줄이고싶어서 아래처럼 줄여벎
'''
def solution(n):
    a,b = 0,3
    for _ in range(n//2-1):
        a,b = a+b, b*3 + a*2 + 2
    return b%1000000007
